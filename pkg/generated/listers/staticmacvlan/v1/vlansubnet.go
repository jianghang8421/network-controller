/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/wardenlym/static-pod-controller/types/apis/staticmacvlan/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VLANSubnetLister helps list VLANSubnets.
type VLANSubnetLister interface {
	// List lists all VLANSubnets in the indexer.
	List(selector labels.Selector) (ret []*v1.VLANSubnet, err error)
	// VLANSubnets returns an object that can list and get VLANSubnets.
	VLANSubnets(namespace string) VLANSubnetNamespaceLister
	VLANSubnetListerExpansion
}

// vLANSubnetLister implements the VLANSubnetLister interface.
type vLANSubnetLister struct {
	indexer cache.Indexer
}

// NewVLANSubnetLister returns a new VLANSubnetLister.
func NewVLANSubnetLister(indexer cache.Indexer) VLANSubnetLister {
	return &vLANSubnetLister{indexer: indexer}
}

// List lists all VLANSubnets in the indexer.
func (s *vLANSubnetLister) List(selector labels.Selector) (ret []*v1.VLANSubnet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VLANSubnet))
	})
	return ret, err
}

// VLANSubnets returns an object that can list and get VLANSubnets.
func (s *vLANSubnetLister) VLANSubnets(namespace string) VLANSubnetNamespaceLister {
	return vLANSubnetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VLANSubnetNamespaceLister helps list and get VLANSubnets.
type VLANSubnetNamespaceLister interface {
	// List lists all VLANSubnets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.VLANSubnet, err error)
	// Get retrieves the VLANSubnet from the indexer for a given namespace and name.
	Get(name string) (*v1.VLANSubnet, error)
	VLANSubnetNamespaceListerExpansion
}

// vLANSubnetNamespaceLister implements the VLANSubnetNamespaceLister
// interface.
type vLANSubnetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VLANSubnets in the indexer for a given namespace.
func (s vLANSubnetNamespaceLister) List(selector labels.Selector) (ret []*v1.VLANSubnet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.VLANSubnet))
	})
	return ret, err
}

// Get retrieves the VLANSubnet from the indexer for a given namespace and name.
func (s vLANSubnetNamespaceLister) Get(name string) (*v1.VLANSubnet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("vlansubnet"), name)
	}
	return obj.(*v1.VLANSubnet), nil
}
