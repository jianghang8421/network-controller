/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/cnrancher/network-controller/types/apis/macvlan/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MacvlanIPLister helps list MacvlanIPs.
type MacvlanIPLister interface {
	// List lists all MacvlanIPs in the indexer.
	List(selector labels.Selector) (ret []*v1.MacvlanIP, err error)
	// MacvlanIPs returns an object that can list and get MacvlanIPs.
	MacvlanIPs(namespace string) MacvlanIPNamespaceLister
	MacvlanIPListerExpansion
}

// macvlanIPLister implements the MacvlanIPLister interface.
type macvlanIPLister struct {
	indexer cache.Indexer
}

// NewMacvlanIPLister returns a new MacvlanIPLister.
func NewMacvlanIPLister(indexer cache.Indexer) MacvlanIPLister {
	return &macvlanIPLister{indexer: indexer}
}

// List lists all MacvlanIPs in the indexer.
func (s *macvlanIPLister) List(selector labels.Selector) (ret []*v1.MacvlanIP, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MacvlanIP))
	})
	return ret, err
}

// MacvlanIPs returns an object that can list and get MacvlanIPs.
func (s *macvlanIPLister) MacvlanIPs(namespace string) MacvlanIPNamespaceLister {
	return macvlanIPNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MacvlanIPNamespaceLister helps list and get MacvlanIPs.
type MacvlanIPNamespaceLister interface {
	// List lists all MacvlanIPs in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.MacvlanIP, err error)
	// Get retrieves the MacvlanIP from the indexer for a given namespace and name.
	Get(name string) (*v1.MacvlanIP, error)
	MacvlanIPNamespaceListerExpansion
}

// macvlanIPNamespaceLister implements the MacvlanIPNamespaceLister
// interface.
type macvlanIPNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MacvlanIPs in the indexer for a given namespace.
func (s macvlanIPNamespaceLister) List(selector labels.Selector) (ret []*v1.MacvlanIP, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.MacvlanIP))
	})
	return ret, err
}

// Get retrieves the MacvlanIP from the indexer for a given namespace and name.
func (s macvlanIPNamespaceLister) Get(name string) (*v1.MacvlanIP, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("macvlanip"), name)
	}
	return obj.(*v1.MacvlanIP), nil
}
