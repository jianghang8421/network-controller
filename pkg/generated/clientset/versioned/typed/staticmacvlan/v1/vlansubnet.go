/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1

import (
	"time"

	scheme "github.com/cnrancher/static-pod-controller/pkg/generated/clientset/versioned/scheme"
	v1 "github.com/cnrancher/static-pod-controller/types/apis/staticmacvlan/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// VLANSubnetsGetter has a method to return a VLANSubnetInterface.
// A group's client should implement this interface.
type VLANSubnetsGetter interface {
	VLANSubnets(namespace string) VLANSubnetInterface
}

// VLANSubnetInterface has methods to work with VLANSubnet resources.
type VLANSubnetInterface interface {
	Create(*v1.VLANSubnet) (*v1.VLANSubnet, error)
	Update(*v1.VLANSubnet) (*v1.VLANSubnet, error)
	Delete(name string, options *metav1.DeleteOptions) error
	DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error
	Get(name string, options metav1.GetOptions) (*v1.VLANSubnet, error)
	List(opts metav1.ListOptions) (*v1.VLANSubnetList, error)
	Watch(opts metav1.ListOptions) (watch.Interface, error)
	Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VLANSubnet, err error)
	VLANSubnetExpansion
}

// vLANSubnets implements VLANSubnetInterface
type vLANSubnets struct {
	client rest.Interface
	ns     string
}

// newVLANSubnets returns a VLANSubnets
func newVLANSubnets(c *StaticmacvlanV1Client, namespace string) *vLANSubnets {
	return &vLANSubnets{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Get takes name of the vLANSubnet, and returns the corresponding vLANSubnet object, and an error if there is any.
func (c *vLANSubnets) Get(name string, options metav1.GetOptions) (result *v1.VLANSubnet, err error) {
	result = &v1.VLANSubnet{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("vlansubnets").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do().
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of VLANSubnets that match those selectors.
func (c *vLANSubnets) List(opts metav1.ListOptions) (result *v1.VLANSubnetList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1.VLANSubnetList{}
	err = c.client.Get().
		Namespace(c.ns).
		Resource("vlansubnets").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do().
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested vLANSubnets.
func (c *vLANSubnets) Watch(opts metav1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Namespace(c.ns).
		Resource("vlansubnets").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch()
}

// Create takes the representation of a vLANSubnet and creates it.  Returns the server's representation of the vLANSubnet, and an error, if there is any.
func (c *vLANSubnets) Create(vLANSubnet *v1.VLANSubnet) (result *v1.VLANSubnet, err error) {
	result = &v1.VLANSubnet{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("vlansubnets").
		Body(vLANSubnet).
		Do().
		Into(result)
	return
}

// Update takes the representation of a vLANSubnet and updates it. Returns the server's representation of the vLANSubnet, and an error, if there is any.
func (c *vLANSubnets) Update(vLANSubnet *v1.VLANSubnet) (result *v1.VLANSubnet, err error) {
	result = &v1.VLANSubnet{}
	err = c.client.Put().
		Namespace(c.ns).
		Resource("vlansubnets").
		Name(vLANSubnet.Name).
		Body(vLANSubnet).
		Do().
		Into(result)
	return
}

// Delete takes name of the vLANSubnet and deletes it. Returns an error if one occurs.
func (c *vLANSubnets) Delete(name string, options *metav1.DeleteOptions) error {
	return c.client.Delete().
		Namespace(c.ns).
		Resource("vlansubnets").
		Name(name).
		Body(options).
		Do().
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *vLANSubnets) DeleteCollection(options *metav1.DeleteOptions, listOptions metav1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Namespace(c.ns).
		Resource("vlansubnets").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do().
		Error()
}

// Patch applies the patch and returns the patched vLANSubnet.
func (c *vLANSubnets) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *v1.VLANSubnet, err error) {
	result = &v1.VLANSubnet{}
	err = c.client.Patch(pt).
		Namespace(c.ns).
		Resource("vlansubnets").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do().
		Into(result)
	return
}
